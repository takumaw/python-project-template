[build-system]
requires = ["hatchling>=1.17.1"]
build-backend = "hatchling.build"

[project]
name = "my-project"
description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
readme = "README.md"
license = { text = "Proprietary" }
authors = [
  { name = "Some One", email = "someone@example.com" },
]
keywords = []
classifiers = [
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/someone/my-project"
Tracker = "https://github.com/someone/my-project/issues"
Source = "https://github.com/someone/my-project"

[project.scripts]
my-project = "my_project.__main__:main"

[tool.hatch.version]
path = "my_project/__version__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.gitlab-ci.yml",
  "/.gitignore",
  "/.vscode",
  "/docs",
]

[tool.hatch.publish.index.repos.private]
url = "https://pypi.example.com"
user = "oauth2"

[tool.hatch.envs.default]
type = "virtual"
path = ".venv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-xdist[psutil]",
  "python-dotenv",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:} tests"
test-cov = "pytest --cov --cov-config=pyproject.toml {args:} tests"

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.docs]
dependencies = [
  "click-man",
  "myst-parser",
  "sphinx",
  "sphinx-click",
  "sphinx_rtd_theme",
  "sphinx_fontawesome",
]

[tool.hatch.envs.docs.scripts]
build = [
  "sphinx-apidoc --module-first --separate --force -o docs/modules my_project",
  "sphinx-build -b html docs docs/_build",
]
build-man = "click-man my-project"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.3.0",
  "mypy>=1.4.0",
  "ruff==0.0.285", # lint を安定化するためバージョンを固定
]
[tool.hatch.envs.lint.scripts]
# list で定義した場合、途中のコマンドで失敗した場合、後続のコマンドが実行されない。
# 先頭に "- "を付与することでエラーコードを無視できるが、その場合 hatch run 時にも
# エラーコードが伝播しない。そのため、いずれかのコマンドが失敗した場合でも後続のコマンドを実行する、
# かつ、いずれかのコマンドが失敗した場合にはエラーコードを出力するよう、手動でスクリプトを組む。
_mypy = "mypy --install-types --non-interactive {args:} my_project tests"
_ruff = "ruff check {args:} my_project tests"
_black = "black {args:} my_project tests"
style = """
  ruff check my_project tests; RUFF_RET_CODE=$?;
  black --check --diff --color my_project tests; BLACK_RET_CODE=$?;
  if [ "$RUFF_RET_CODE" = "0" ] && [ "$BLACK_RET_CODE" = "0" ]; then
    exit 0
  else
    exit 1
  fi
"""
typing = "_mypy"
all = """
  ruff check my_project tests; RUFF_RET_CODE=$?;
  black --check --diff --color my_project tests; BLACK_RET_CODE=$?;
  mypy --install-types --non-interactive my_project tests; MYPY_RET_CODE=$?;
  if [ "$RUFF_RET_CODE" = "0" ] && [ "$BLACK_RET_CODE" = "0" ] && [ "$MYPY_RET_CODE" = "0" ]; then
    exit 0
  else
    exit 1
  fi
"""
format = """
  ruff check --fix my_project tests;
  black my_project tests
"""

[tool.pytest.ini_options]
addopts = "-n auto"
markers = [
]

[tool.coverage.run]
source_pkgs = ["my_project"]
branch = true
parallel = true
omit = []

[tool.coverage.paths]
my_project = ["my_project"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
ignore_missing_imports = true

[tool.black]
line-length = 150
target-version = ["py39"]
skip-string-normalization = true

[tool.ruff]
src = ["my_project", "test"]
show-fixes = true
line-length = 150
target-version = "py39"
select = [
  "ALL",
]
ignore = [
  ## Pyflakes (F)
  # 使われていない import を無視
  "F401",
  # プレースホルダ―なき f-string を許容
  "F541",
  # 未使用の変数を許容
  "F841",
  # 未使用の型アノテーション付き変数を許容
  "F842",
  ## pycodestyle (E, W)
  ## mccabe (C90)
  # 複雑な関数を許容
  "C901",
  ## isort (I)
  ## pep8-naming (N)
  # 大文字パッケージ名のインポートを許容
  "N812",
  ## pydocstyle (D)
  # magic method の docstring が無いことを許容
  "D105",
  # class の docstring は class 宣言の直後にする(=D211)
  # D203 は docstring と class 宣言の間に空行があることを要求し
  # D211 と矛盾するため、D203 を無効化する
  "D203",
  # function の docstring のサマリ行を、開始行にする。(=D212)
  # D213 はサマリ行を開始行の次の行にすることを要求し D212 を矛盾
  # するため、D213 を無効化する
  "D213",
  # docstring の末尾が . で終わらないことを無視
  "D400",
  # docstring が命令調でないことを許容
  "D401",
  "D415",
  ## pyupgrade (UP)
  # Python 3.9 で追加された | による union 型を強制しない
  "UP007",
  ## flake8-2020 (YTT)
  ## flake8-annotations (ANN)
  # *args の型のアノテーションを不要に
  "ANN002",
  # **kwargs の型のアノテーションを不要に
  "ANN003",
  # self には型アノテーションを不要に
  # Python 3.11 を前提とした際は Self が容易に使えるようになるので除去
  "ANN101",
  # cls には型アノテーションを不要に
  "ANN102",
  # special method の返却型のアノテーションを不要に
  "ANN204",
  ## flake8-async (ASYNC)
  ## flake8-bandit (S)
  ## flake8-blind-except (BLE)
  ## flake8-boolean-trap (FBT)
  # ブール型引数を許容
  "FBT001",
  # ブール型引数のデフォルト値を許容
  "FBT002",
  ## flake8-bugbear (B)
  ## flake8-builtins (A)
  ## flake8-commas (COM)
  ## flake8-copyright (CPY)
  ## flake8-comprehensions (C4)
  ## flake8-datetimez (DTZ)
  ## flake8-debugger (T10)
  ## flake8-django (DJ)
  ## flake8-errmsg (EM)
  # エラーメッセージ内で string、f-string 使用を許容
  "EM101",
  "EM102",
  ## flake8-executable (EXE)
  ## flake8-future-annotations (FA)
  # PEP 563 の型アノテーションを __future__ からのインポートなしに利用許可
  "FA100",
  # PEP 604 の Union アノテーションを __future__ からのインポートなしに利用許可
  "FA102",
  ## flake8-implicit-str-concat (ISC)
  # 文字列の明示的な結合を許可
  "ISC003",
  ## flake8-import-conventions (ICN)
  ## flake8-logging-format (G)
  # ロギングにおける + を許容
  "G003",
  # ロギングにおける f-string を許容
  "G004",
  ## flake8-no-pep420 (INP)
  ## flake8-pie (PIE)
  ## flake8-print (T20)
  ## flake8-pyi (PYI)
  ## flake8-pytest-style (PT)
  ## flake8-quotes (Q)
  ## flake8-raise (RSE)
  ## flake8-return (RET)
  # return 前の変数定義を許容
  "RET504",
  # return 後の else を許容
  "RET505",
  # raise 後の else を許容
  "RET506",
  # continue 後の else を許容
  "RET507",
  # break 後の else を許容
  "RET508",
  ## flake8-self (SLF)
  ## flake8-slots (SLOT)
  ## flake8-simplify (SIM)
  # if の折りたたみを強制しない
  "SIM102",
  # except-pass を許容
  "SIM105",
  # ternary operator の使用を強制しない
  "SIM108",
  # any の使用を強制しない
  "SIM110",
  # if 分岐の or による結合を強制しない
  "SIM114",
  # if-else を dict lookup へ置き換えることを強制しない
  "SIM116",
  # x-if-not-s-else-y を許容
  "SIM212",
  # if-else を dict lookup へ置き換えることを強制しない
  "SIM401",
  ## flake8-tidy-imports (TID)
  ## flake8-type-checking (TCH)
  ## flake8-gettext (INT)
  ## flake8-unused-arguments (ARG)
  ## flake8-use-pathlib (PTH)
  ## flake8-todos (TD)
  # FIXME、XXX の使用を許容
  "TD001",
  # TODO に author を記載しないことを許容
  "TD002",
  # TODO に issue link を記載しないことを許容
  "TD003",
  ## flake8-fixme (FIX)
  # FIXME の使用を許容
  "FIX001",
  # TODO の使用を許容
  "FIX002",
  # XXX の使用を許容
  "FIX003",
  # HACK の使用を許容
  "FIX004",
  ## flake8-eradicate (ERA)
  # コメントアウトを許容
  "ERA001",
  ## pandas-vet (PD)
  ## pygrep-hooks (PGH)
  ## Pylint (PL)
  # return の多さを許容
  "PLR0911",
  # if の多さを許容
  "PLR0912",
  # param の多さを許容
  "PLR0913",
  # statement の多さを許容
  "PLR0915",
  # magic value の利用を許容
  "PLR2004",
  # else-if の折りたたみを強制しない
  "PLR5501",
  ## tryceratops (TRY)
  # エラーメッセージを直接発出することを許容
  "TRY003",
  ## flynt (FLY)
  ## NumPy-specific rules (NPY)
  ## Airflow (AIR)
  ## Perflint (PERF)
  ## Ruff-specific rules (RUF)
  # 文字列中の全角文字を許容
  "RUF001",
  # docstring 中の全角文字を許容
  "RUF002",
  # コメント中の全角文字を許容
  "RUF003",
]
unfixable = [
]

[tool.ruff.per-file-ignores]
# テストでは柔軟な記述を許容する
"tests/**/*" = [
  # 型アノテーションの不在を許容
  "ANN",
  # 長い行を許容
  "E501",
  # CamelCase でないクラス名を許容
  "N801",
  # assert の利用を許容
  "S101",
]
# ドキュメントの設定ファイルは無視
"docs/**/*" = [
  "ALL",
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false
mypy-init-return = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["my_project"]

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator"]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.pydocstyle]
ignore-decorators = ["typing.overload"]
